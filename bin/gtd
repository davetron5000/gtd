#!/usr/bin/env ruby
require 'gli'
require 'gtd'
require 'pathname'

include GLI::App

program_desc 'Describe your application here'

version Gtd::VERSION

subcommand_option_handling :normal
arguments :strict

desc "Root location for files"
flag :root, default_value: Pathname(ENV["HOME"]) / "Dropbox" / "GTD"

desc "Use colored output"
switch :color, default_value: true

desc "List tasks"
command :ls do |c|
  c.desc "Show only tasks in the given context"
  c.flag [:context,:"@"]

  c.desc "Show only tasks for the given project"
  c.flag [:project,:"+"]

  c.desc "Show only completed tasks"
  c.switch [:completed]

  c.action do |global,options,args|
    $todo_list.search(context: options[:context], project: options[:project], completed: options[:completed]) do |task|
      puts Gtd::Formatters::Task.new(task).to_s
    end
  end
end

desc "Edit the task list directly in your configured $EDITOR"
command [:edit,:vi] do |c|
  c.action do |global,options,args|
    editor = ENV["EDITOR"]
    system("#{editor} '#{$todo_list.file}'")
  end
end

desc "Mark a task complete"
arg :task_id
command [:done,:complete] do |c|
  c.action do |global,options,args|
    result = Gtd::TaskCompleter.new($todo_list,$projects).complete_task(args[0].to_i)
    puts result.to_s
  end
end

desc "Manage Projects"
command :projects do |c|
  c.desc "List active projects"
  c.command :ls do |ls|

    ls.desc "Show next action on each project"
    ls.switch "next-actions", default_value: true

    ls.action do |global,options,args|
      $projects.each do |project|
        if options["next-actions"]
          puts Gtd::Formatters::ProjectSummary.new(project).to_s
        else
          puts Gtd::Formatters::ProjectCompactSummary.new(project).to_s
        end
      end
    end
  end

  c.desc "Archive a project"
  c.arg :project_id
  c.command :archive do |archive|
    archive.action do |global,options,args|
      $projects.archive(args[0])
    end
  end

  c.desc "New Project"
  c.arg_name "project_name"
  c.command :new do |n|
    n.action do |global,options,args|
      exit_now!("You must provide a name") if args.empty?
      name = args.join(" ")
      $projects.new(name)
    end
  end

  c.desc "Show Project info"
  c.arg :project_id
  c.command :show do |show|
    show.action do |global,options,args|
      puts Gtd::Formatters::ProjectDetails.new($projects.find(args[0])).to_s
    end
  end

  c.desc "Manage Project tasks"
  c.command :tasks do |tasks|
    tasks.desc "List Project tasks"
    tasks.arg :project_id
    tasks.command :ls do |ls|
      ls.action do |global,options,args|
        $projects.find(args[0]).tasks.each do |task|
          puts Gtd::Formatters::Task.new(task, show_id: false).to_s
        end
      end
    end

    tasks.desc "Add a new task for this project"
    tasks.arg_name "project_id new_task_name"
    tasks.command :new do |add|
      add.action do |global,options,args|
        project_id = args[0]
        task_name  = args[1..-1].join(" ")
        project = $projects.find(project_id)
        project.add_task(task_name)
        project.save!
      end
    end

    tasks.default_command :ls
  end

  c.default_command :ls
end

pre do |global,command,options,args|
  Rainbow.enabled = global[:color]
  $todo_list = Gtd::TodoTxt.new(Pathname(global[:root]) / "todo.txt")
  $projects = Gtd::Projects.new($todo_list,Pathname(global[:root]) / "projects")
  true
end

post do |global,command,options,args|
end

on_error do |exception|
  true
end

exit run(ARGV)
