#!/usr/bin/env ruby
require 'gli'
require 'gtd'
require 'pathname'

include GLI::App

program_desc 'Describe your application here'

version Gtd::VERSION

subcommand_option_handling :normal
arguments :strict

desc "Root location for files"
flag :root, default_value: Pathname(ENV["HOME"]) / "Dropbox" / "GTD"

desc "Use colored output"
switch :color, default_value: true

desc "List tasks"
command :ls do |c|
  c.desc "Show only tasks in the given context"
  c.flag [:context,:"@"]

  c.desc "Show only tasks for the given project"
  c.flag [:project,:"+"]


  c.action do |global,options,args|
    $todo_list.search(context: options[:context], project: options[:project]) do |task|
      puts task
    end
  end
end

command :lsp do |c|
  c.action do |global,options,args|
    $todo_list.projects.each do |p|
      puts p
    end
  end
end

desc "Manage Projects"
command :projects do |c|
  c.desc "List projects"
  c.command :ls do |ls|
    ls.action do |global,options,args|
      $projects.each do |_|
        puts "[#{_.id}] #{_.name}"
      end
    end
  end

  c.desc "Archive a project"
  c.arg :project_id
  c.command :archive do |archive|
    archive.action do |global,options,args|
      project = $projects.detect { |_| _.id == args[0].to_i }
      if project.nil?
        exit_now!("No project with id #{args[0]}")
      end
      $projects.archive(project)
    end
  end

  c.desc "New Project"
  c.arg_name "project_name"
  c.command :new do |n|
    n.action do |global,options,args|
      exit_now!("You must provide a name") if args.empty?
      name = args.join(" ")
      $projects.new(name)
    end
  end

  c.desc "Show Project info"
  c.command :show do |show|
    show.action do |global,options,args|
    end
  end

  c.desc "Show Project tasks"
  c.command :tasks do |tasks|
    tasks.action do |global,options,args|
    end
  end

  c.default_command :ls
end

pre do |global,command,options,args|
  Rainbow.enabled = global[:color]
  $todo_list = Gtd::TodoTxt.new(Pathname(global[:root]) / "todo.txt")
  $projects = Gtd::Projects.new(Pathname(global[:root]) / "projects")
  true
end

post do |global,command,options,args|
end

on_error do |exception|
  true
end

exit run(ARGV)
